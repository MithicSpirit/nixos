diff --git a/src/keybinds.h b/src/keybinds.h
index 4c50570..051efa6 100644
--- a/src/keybinds.h
+++ b/src/keybinds.h
@@ -14,21 +14,29 @@
 typedef unsigned long KeySym;
 #endif
 
 #if defined(HAVE_X11) || defined(HAVE_WAYLAND)
 static inline bool keys_are_pressed(const std::vector<KeySym>& keys)
 {
+    if (keys.size() == 0)
+        return false;
+
     #if defined(HAVE_WAYLAND)
     if(wl_display_ptr && wl_handle)
     {
         update_wl_queue();
 
-        if(wl_pressed_keys == keys)
-        {
-            return true;
+        if (wl_pressed_keys.size() != keys.size())
+            return false;
+
+        for (KeySym ks : keys) {
+            if (wl_pressed_keys.count(ks) == 0)
+                return false;
         }
+
+        return true;
     }
     #endif
 
     #if defined(HAVE_X11)
     if (init_x11())
     {
@@ -44,13 +52,13 @@ static inline bool keys_are_pressed(const std::vector<KeySym>& keys)
             bool isPressed = !!(keys_return[kc2 >> 3] & (1 << (kc2 & 7)));
 
             if (isPressed)
                 pressed++;
         }
 
-        if (pressed > 0 && pressed == keys.size()) {
+        if (pressed == keys.size()) {
             return true;
         }
     }
     #endif
 
     return false;
diff --git a/src/wayland_hook.h b/src/wayland_hook.h
index c637e72..860aa3a 100644
--- a/src/wayland_hook.h
+++ b/src/wayland_hook.h
@@ -1,13 +1,14 @@
 #include <wayland-client.h>
+#include <set>
 #include <vector>
 
 #ifndef KeySym
 typedef unsigned long KeySym;
 #endif
 
 extern void* wl_handle;
 extern struct wl_display* wl_display_ptr;
-extern std::vector<KeySym> wl_pressed_keys;
+extern std::set<KeySym> wl_pressed_keys;
 
 void init_wayland_data();
 void update_wl_queue();
diff --git a/src/wayland_keybinds.cpp b/src/wayland_keybinds.cpp
index d18cbf1..d59b6e7 100644
--- a/src/wayland_keybinds.cpp
+++ b/src/wayland_keybinds.cpp
@@ -1,10 +1,11 @@
 #include <cstdint>
 #include <cstring>
 #include <array>
 #include <algorithm>
+#include <set>
 #include <unistd.h>
 #include <vector>
 #include <wayland-client.h>
 #include <xkbcommon/xkbcommon.h>
 #include <sys/mman.h>
 #include "wayland_hook.h"
@@ -16,13 +17,13 @@ struct wl_display* wl_display_ptr = nullptr;
 struct wl_seat* seat = nullptr;
 struct wl_keyboard* keyboard = nullptr;
 struct xkb_context *context_xkb = nullptr;
 struct xkb_keymap *keymap_xkb = nullptr;
 struct xkb_state *state_xkb = nullptr;
 struct wl_event_queue* queue = nullptr;
-std::vector<KeySym> wl_pressed_keys {};
+std::set<KeySym> wl_pressed_keys {};
 
 static void seat_handle_capabilities(void *data, wl_seat *seat, uint32_t caps);
 static void seat_handle_name(void *data, struct wl_seat *seat, const char *name) {}
 
 struct wl_seat_listener seat_listener {
    .capabilities = seat_handle_capabilities,
@@ -74,19 +75,17 @@ static void wl_keyboard_key(void *data, struct wl_keyboard *wl_keyboard, uint32_
 {
    xkb_keycode_t keycode = key + 8;
    xkb_keysym_t keysym = xkb_state_key_get_one_sym(state_xkb, keycode);
 
    if(state)
    {
-      wl_pressed_keys.push_back(keysym);
+      wl_pressed_keys.insert(keysym);
    }
    else
    {
-      auto it = std::find(wl_pressed_keys.begin(), wl_pressed_keys.end(), keysym);
-      if(it != wl_pressed_keys.end())
-         wl_pressed_keys.erase(it);
+      wl_pressed_keys.erase(keysym);
    }
 }
 
 static void wl_keyboard_modifiers(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched, uint32_t mods_locked, uint32_t group){}
 
 static void wl_keyboard_repeat_info(void *data, struct wl_keyboard *wl_keyboard, int32_t rate, int32_t delay){}
